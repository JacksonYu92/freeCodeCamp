class Results extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    {/* GameOfChance 传来的 prop fiftyFifty 来决定渲染文本 You Win! 还是 You Lose! */}
    return <h1>{this.props.fiftyFifty ? "You Win!" : "You Lose!"}</h1>;
    {/* 修改这行上面的代码 */}
  }
}

class GameOfChance extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 1
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    this.setState(prevState => {
      // 最后，确保 handleClick() 方法正确计算每个回合，以便用户知道他们玩过多少次。 这也可以让用户知道组件实际上已经更新，以防他们连续赢两次或输两次时自己不知道。
      return {
        counter: this.state.counter + 1
      }
    });
  }
  render() {
    //首先，需要一个简单的表达式，每次运行时都会随机返回一个不同的值。 可以使用 Math.random()。 每次调用此方法时，此方法返回 0（包括）和 1（不包括）之间的值。 
    //因此，对于50/50的几率，请在表达式中使用 Math.random() >= .5。 从统计学上讲，这个表达式有 50％ 的几率返回 true，另外 50％ 返回 false。
    //在第 render 方法里，用此表达式替换 null 以完成变量声明。
    const expression = Math.random() >=0.5 ? true : false; // 修改这一行
    return (
      <div>
        <button onClick={this.handleClick}>Play Again</button>
        {/* 将 Results 组件渲染为 GameOfChance 的子 组件，并将 expression 作为名为 fiftyFifty 的 prop 传入 。 */}
        <Results fiftyFifty = {expression} />
        {/* 修改这行上面的代码 */}
        <p>{'Turn: ' + this.state.counter}</p>
      </div>
    );
  }
}
